# CODE:BEGIN:tutorials_eth_lifecycle_graphql_section1
# CODE:BEGIN:tutorials_eth_lifecycle_graphql_section2
# CODE:BEGIN:tutorials_eth_lifecycle_graphql_section3
subscription {
    transactionLifecycle(hash: "0x3be3b44ae48a074d3b79e3054bb3b62b5c5e5a8fc2210cd1dc7c7932ae5addcd"){
# CODE:END:tutorials_eth_lifecycle_graphql_section2
        previousState
        currentState
        transitionName
        transition {
# CODE:END:tutorials_eth_lifecycle_graphql_section3
            __typename

            ... on TrxTransitionInit {
                transaction {
                    ...TransactionFragment
                }
                blockHeader {
                    ...BlockHeaderFragment
                }
                trace {
                    ...TransactionTraceFragment
                }
                confirmations
                replacedById
            }

            ...on TrxTransitionPooled {
                transaction {
                    ...TransactionFragment
                }
            }

            ...on TrxTransitionMined {
                blockHeader {
                    ...BlockHeaderFragment
                }
                trace {
                    ...TransactionTraceFragment
                }
                confirmationsher
            }
# CODE:BEGIN:tutorials_eth_lifecycle_graphql_section4
            ...on TrxTransitionForked {
                transaction {
                    ...TransactionFragment
                }
            }
# CODE:END:tutorials_eth_lifecycle_graphql_section4
            ...on TrxTransitionConfirmed {
                confirmations
            }

            ...on TrxTransitionReplaced {
                replacedById
            }

        }
    }
}

# CODE:BEGIN:tutorials_eth_lifecycle_graphql_section5
fragment TransactionFragment on Transaction {
    hash
    from
    to
    nonce
    gasPrice
    gasLimit
    value
    inputData
    signature {
        v
        s
        r
    }
}
# CODE:END:tutorials_eth_lifecycle_graphql_section5

fragment TransactionTraceFragment on TransactionTrace {
    hash
    from
    to
    nonce
    gasPrice
    gasLimit
    value
    inputData
    signature {
        v
        s
        r
    }
    cumulativeGasUsed
    publicKey
    index
    create
    outcome
}

fragment BlockHeaderFragment on BlockHeader {
    parentHash
    unclesHash
    coinbase
    stateRoot
    transactionsRoot
    receiptRoot
    logsBloom
    difficulty
    number
    gasLimit
    gasUsed
    timestamp
    extraData
    mixHash
    nonce
    hash
}
# CODE:END:tutorials_eth_lifecycle_graphql_section1
