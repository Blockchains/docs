[
  {
    "name": "Subscription",
    "description": "Subscription holds the top-level calls that return streams of data. Call them with the `subscription` keyword from your top-level GraphQL query",
    "fields": [
      {
        "name": "blocks",
        "type": {
          "reqType": true,
          "name": "BlockEdge"
        },
        "description": "",
        "arguments": [
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusive. A negative value means a block relative to the head block. Omitting this value means unbounded (since the genesis block)."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your stream if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "0"
            },
            "description": "Limit the number of results streamed back. 0 means unlimited"
          }
        ]
      },
      {
        "name": "searchTransactions",
        "type": {
          "reqType": true,
          "name": "TransactionEdge"
        },
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\nwas in fact REMOVED from the chain because of blocks reorganization.  The `undo` field is always `false` in backward searches.",
        "arguments": [
          {
            "name": "indexName",
            "type": {
              "reqType": true,
              "name": "TRANSACTIONS_INDEX_NAME"
            },
            "description": ""
          },
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Lower block num boundary, inclusive. A negative value means a block relative to the head block. Omitting this value means unbounded (since the genesis block)."
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": "Higher block num boundary, inclusive. A value of 0 means live-searching on any incoming blocks (the default behavior). A negative value means a block relative to the head block, ex: -1 means the head block, -2 means the second to last block, etc.."
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "0"
            },
            "description": "Limit the number of results streamed back. 0 means unlimited"
          },
          {
            "name": "sort",
            "type": {
              "name": "SORT",
              "default": "ASC"
            },
            "description": "From which end to start. ASC means from the past, going into the future. DESC means recent to older transactions."
          },
          {
            "name": "liveMarkerInterval",
            "type": {
              "name": "Uint32",
              "default": "0"
            },
            "description": "If non-zero, indicates you want to mark the stream when reaching live blocks. A marker is a response with a `trace` equal to `null`, which will be sent at each `liveMarkerInterval` blocks. The first `trace` to be equal to `null` in a stream indicates you are now processing live blocks.\n\nThe value for `liveMarkerInterval` is a number of blocks."
          }
        ]
      },
      {
        "name": "transactionLifecycle",
        "type": {
          "reqType": true,
          "name": "TransactionState"
        },
        "description": "",
        "arguments": [
          {
            "name": "hash",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": "hash of the transaction you want to track the state"
          }
        ]
      }
    ]
  },
  {
    "name": "Query",
    "description": "Query holds the top-level calls that return single responses of data. Call them with the `query` keyword from your top-level GraphQL query",
    "fields": [
      {
        "name": "block",
        "type": {
          "name": "Block"
        },
        "description": "",
        "arguments": [
          {
            "name": "hash",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "blockByNumber",
        "type": {
          "name": "Block"
        },
        "description": "",
        "arguments": [
          {
            "name": "number",
            "type": {
              "reqType": true,
              "name": "Uint64"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "transaction",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "",
        "arguments": [
          {
            "name": "hash",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "searchTransactions",
        "type": {
          "reqType": true,
          "name": "TransactionConnection"
        },
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\n\nWhen the returned `cursor` is empty, it means you have reached the end of the specified block\nrange.\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\nwas in fact REMOVED from the chain because of blocks reorganization.\n\nSee also the streaming version under `Subscription`",
        "arguments": [
          {
            "name": "indexName",
            "type": {
              "reqType": true,
              "name": "TRANSACTIONS_INDEX_NAME"
            },
            "description": ""
          },
          {
            "name": "query",
            "type": {
              "reqType": true,
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "lowBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": ""
          },
          {
            "name": "highBlockNum",
            "type": {
              "name": "Int64"
            },
            "description": ""
          },
          {
            "name": "cursor",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "limit",
            "type": {
              "name": "Int64",
              "default": "100"
            },
            "description": ""
          },
          {
            "name": "sort",
            "type": {
              "name": "SORT",
              "default": "ASC"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "PageInfo",
    "description": "",
    "fields": [
      {
        "name": "startCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "endCursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionConnection",
    "description": "The Connection type for a Transaction. See the [GraphQL core concepts](https://docs.dfuse.io/guides/core-concepts/graphql/)",
    "fields": [
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "TransactionEdge"
        },
        "description": "A list of edges to transactions",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "reqType": true,
          "name": "PageInfo"
        },
        "description": "Information to aid pagination",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionEdge",
    "description": "A single transaction response.\n\nWARNING: when doing forward streaming searches, do NOT forget to include the `undo` field to determine if the message is actually a REVERSAL of the transaction.\n\nNOTE: always check the value of `node.status` to make sure it is successfully executed before assuming it is.",
    "fields": [
      {
        "name": "undo",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this response is an UNDO operation of a previously sent response.\n\nIn a forward search, make sure you catch this and always verify its value.. as to not double/triple count transactions.\n\nIn a backward searches, `undo` will always be `false`.",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Query cursor, allowing you to continue fetching results even after interruption of your connection, without missing a beat.",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "reqType": true,
          "name": "BlockWithHeader"
        },
        "description": "`block` is the block in which this transaction was mined",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "The TransactionTrace object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "Transaction",
    "description": "",
    "fields": [
      {
        "name": "to",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`to` is the recipient address of a transfer, or target contract of a call.  [VERIFY: will be empty for contract-creating calls / if untrue, resurface the `create: true` variable like in a TransactioNTrace for consistency.]",
        "arguments": []
      },
      {
        "name": "nonce",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`nonce` is an ever incrementing counter of transactions issued by the `from` account.",
        "arguments": []
      },
      {
        "name": "gasPrice",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`gasPrice` is the price offered to miners for gas, in wei per unit.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasLimit` is the maximum amount of gas this transaction can consume. Other Ethereum nodes often name this field simply `gas`. Alias the field name if you prefer. See: https://graphql.org/learn/queries/#aliases",
        "arguments": []
      },
      {
        "name": "value",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`value` is the Ether value (in wei) sent along with this transaction.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "inputData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`inputData` is the data supplied to the target contract of the transaction. It is sometimes named `input` elsewhere.",
        "arguments": []
      },
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`hash` is the hash of this transaction. It is also a universally unique pointer to this transaction.",
        "arguments": []
      },
      {
        "name": "from",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`from` is the account that sent this transaction - this will always be an externally owned account in the context of this object.",
        "arguments": []
      },
      {
        "name": "signature",
        "type": {
          "reqType": true,
          "name": "Signature"
        },
        "description": "`signature` holds the V, R and S values representing the cryptographic signature for this transaction. It is based on these values that the `from` address is derived",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTraceConnection",
    "description": "The Connection type for a TransactionTrace",
    "fields": [
      {
        "name": "edges",
        "type": {
          "isList": true,
          "reqList": true,
          "name": "TransactionTraceEdge"
        },
        "description": "A list of edges to transaction traces",
        "arguments": []
      },
      {
        "name": "pageInfo",
        "type": {
          "reqType": true,
          "name": "PageInfo"
        },
        "description": "Information to aid pagination",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTraceEdge",
    "description": "A single transaction trace response.\n\nWARNING: when doing forward streaming searches, do NOT forget to include the `undo` field to determine if the message is actually a REVERSAL of the transaction.\n\nNOTE: always check the value of `node.status` to make sure it is successfully executed before assuming it is.",
    "fields": [
      {
        "name": "undo",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Query cursor, allowing you to continue fetching results even after interruption of your connection, without missing a beat.",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "reqType": true,
          "name": "BlockWithHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "The transaction trace object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTrace",
    "description": "Traces of the execution of a given transaction. This means the\ntransaction was executed on the chain. You also get context about the\nblock in which it was executed, and the status of the execution.\n\nWARN: Make sure to always check the `status` to make sure you're not\nconsidering a failed transaction as if it was successful.",
    "fields": [
      {
        "name": "to",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`to` is the recipient address of a transfer, or target contract of a call.\n\nNOTE: this field will *always* be set, even when the transaction creates a contract.  To distinguish contract creations, use the `create` field.",
        "arguments": []
      },
      {
        "name": "nonce",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`nonce` is an ever incrementing counter of transactions issued by the `from` account.",
        "arguments": []
      },
      {
        "name": "gasPrice",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`gasPrice` is the price offered to miners for gas, in wei per unit. You can encode it differently with the `encoding` parameter.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasLimit` is the maximum amount of gas this transaction can consume. Other Ethereum nodes often name this field simply `gas`. Alias the field name if you prefer. See: https://graphql.org/learn/queries/#aliases",
        "arguments": []
      },
      {
        "name": "value",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`value` is the Ether value (in wei) sent along with this transaction.",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "inputData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`inputData` is the data supplied to the target contract of the transaction. It is sometimes named `input` elsewhere.",
        "arguments": []
      },
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`hash` is the hash of this transaction. It is also a universally unique pointer to this transaction.",
        "arguments": []
      },
      {
        "name": "from",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`from` is the account that sent this transaction - this will always be an externally owned account in the context of this object.",
        "arguments": []
      },
      {
        "name": "signature",
        "type": {
          "reqType": true,
          "name": "Signature"
        },
        "description": "`signature` holds the V, R and S values representing the cryptographic signature for this transaction. It is based on these values that the `from` address is derived",
        "arguments": []
      },
      {
        "name": "status",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATUS"
        },
        "description": "`status` shows if the transaction was successful, failed or was reverted.  You have the details on the Calls as to which execution is responsible for the failure, and traces up to that point.",
        "arguments": []
      },
      {
        "name": "gasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`gasUsed` is the quantity of gas units that was consumed processing this transaction.",
        "arguments": []
      },
      {
        "name": "cumulativeGasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "`cumulativeGasUsed` is [TODO: Define properly].",
        "arguments": []
      },
      {
        "name": "publicKey",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "TODO: detail, which type of encoding.. and is it even present?",
        "arguments": []
      },
      {
        "name": "index",
        "type": {
          "reqType": true,
          "name": "Int"
        },
        "description": "`index` is the 0-based index of this transaction's execution within the block. TODO: REVIEW",
        "arguments": []
      },
      {
        "name": "create",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "`create` is true when the transaction represents a contract deployment",
        "arguments": []
      },
      {
        "name": "outcome",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "block",
        "type": {
          "name": "BlockWithHeader"
        },
        "description": "`block` is the block in which this transaction was mined.",
        "arguments": []
      },
      {
        "name": "allLogs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "`allLogs` is a list of all log events within the transaction, flattened and ordered by execution time.",
        "arguments": []
      },
      {
        "name": "flatCalls",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "Call"
        },
        "description": "Lists all calls, flattened and ordered by execution time.",
        "arguments": []
      },
      {
        "name": "matchingCalls",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "Call"
        },
        "description": "Returns a flattened list of calls, in _execution_ order, of only the matching elements (from a search, or other filtering).",
        "arguments": []
      },
      {
        "name": "matchingLogs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "Returns a flattened list of logs, in _execution_ order, of only the matching elements (from a search, or other filtering).",
        "arguments": []
      }
    ]
  },
  {
    "name": "Signature",
    "description": "",
    "fields": [
      {
        "name": "v",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "r",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "s",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionReceipt",
    "description": "",
    "fields": [
      {
        "name": "stateRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "cumulativeGasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "logsBloom",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "logs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Call",
    "description": "",
    "fields": [
      {
        "name": "index",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "parentIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "depth",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "callType",
        "type": {
          "reqType": true,
          "name": "CALL_TYPE"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "from",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "to",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "`to` is the address of the contract being executed",
        "arguments": []
      },
      {
        "name": "value",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "gasConsumed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "gasBilled",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "status",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATUS"
        },
        "description": "`status` represents the outcome of the execution of this Call",
        "arguments": []
      },
      {
        "name": "failureCause",
        "type": {
          "name": "String"
        },
        "description": "Defines the cause of the failure. Will be set only when `status` is either `REVERTED` or `FAILED`. The reason is a free form string extracted from the Ethereum node that executed the call.\n\nIMPORTANT: This field has no backward policy and the value could change at any moment. Use it for logging purposes, direct user display, debugging help etc. Use it for logic decisions at your own risk.",
        "arguments": []
      },
      {
        "name": "inputData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "returnData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "storageChanges",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "StorageChange"
        },
        "description": "",
        "arguments": [
          {
            "name": "includeReverted",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": ""
          }
        ]
      },
      {
        "name": "balanceChanges",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "BalanceChange"
        },
        "description": "",
        "arguments": [
          {
            "name": "includeReverted",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": ""
          }
        ]
      },
      {
        "name": "logs",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "EventLog"
        },
        "description": "",
        "arguments": [
          {
            "name": "includeReverted",
            "type": {
              "name": "Boolean",
              "default": false
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "BalanceChange",
    "description": "",
    "fields": [
      {
        "name": "address",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "oldValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "newValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": {
              "name": "VALUE_ENCODING",
              "default": "HEX"
            },
            "description": ""
          }
        ]
      },
      {
        "name": "reason",
        "type": {
          "reqType": true,
          "name": "BALANCE_CHANGE_REASON"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "StorageChange",
    "description": "",
    "fields": [
      {
        "name": "key",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "address",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "oldValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "newValue",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "EventLog",
    "description": "",
    "fields": [
      {
        "name": "address",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "topics",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "data",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "blockIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "transactionIndex",
        "type": {
          "reqType": true,
          "name": "Uint32"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockWithHeader",
    "description": "",
    "fields": [
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "header",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Block",
    "description": "",
    "fields": [
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "size",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "header",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "uncles",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "transactions",
        "type": {
          "reqType": true,
          "name": "TransactionConnection"
        },
        "description": "",
        "arguments": [
          {
            "name": "first",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "last",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "before",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "after",
            "type": {
              "name": "String"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "BlockHeader",
    "description": "",
    "fields": [
      {
        "name": "parentHash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "unclesHash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "coinbase",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "stateRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "transactionsRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "receiptRoot",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "logsBloom",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "difficulty",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "gasLimit",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "gasUsed",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "timestamp",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "extraData",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "mixHash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "nonce",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockEdge",
    "description": "",
    "fields": [
      {
        "name": "undo",
        "type": {
          "reqType": true,
          "name": "Boolean"
        },
        "description": "Whether this response is an UNDO operation of a previously sent response.\n\nMake sure you catch this and always verify its value, as to not double/triple count blocks.",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "Stream cursor, allowing you to continue fetching results even after interruption of your connection, without missing a beat.",
        "arguments": []
      },
      {
        "name": "node",
        "type": {
          "name": "MinedBlock"
        },
        "description": "The block object.",
        "arguments": []
      }
    ]
  },
  {
    "name": "MinedBlock",
    "description": "",
    "fields": [
      {
        "name": "hash",
        "type": {
          "reqType": true,
          "name": "String"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "number",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "size",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "header",
        "type": {
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "uncles",
        "type": {
          "isList": true,
          "reqList": true,
          "reqType": true,
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "transactionTraces",
        "type": {
          "reqType": true,
          "name": "TransactionTraceConnection"
        },
        "description": "",
        "arguments": [
          {
            "name": "first",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "last",
            "type": {
              "name": "Uint32"
            },
            "description": ""
          },
          {
            "name": "before",
            "type": {
              "name": "String"
            },
            "description": ""
          },
          {
            "name": "after",
            "type": {
              "name": "String"
            },
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "TransactionState",
    "description": "A single Transaction State response.",
    "fields": [
      {
        "name": "previousState",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATE"
        },
        "description": "previousState is the previous of the transaction. When the stream is initiated this will be UNKNOWN",
        "arguments": []
      },
      {
        "name": "currentState",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_STATE"
        },
        "description": "currentState is the current known state of the transaction.",
        "arguments": []
      },
      {
        "name": "transitionName",
        "type": {
          "reqType": true,
          "name": "TRANSACTION_TRANSITION"
        },
        "description": "transitionName is the current transition of the transaction.",
        "arguments": []
      },
      {
        "name": "transition",
        "type": {
          "name": "TrackerTransition"
        },
        "description": "transition holds the details of the specific transition. This can be one of the following types based on the specific transition:\n- TrxTransitionInit\n- TrxTransitionPooled\n- TrxTransitionMined\n- TrxTransitionForked\n- TrxTransitionConfirmed\n- TrxTransitionReplaced",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionInit",
    "description": "",
    "fields": [
      {
        "name": "transaction",
        "type": {
          "name": "Transaction"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "blockHeader",
        "type": {
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "confirmations",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "replacedById",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionPooled",
    "description": "",
    "fields": [
      {
        "name": "transaction",
        "type": {
          "name": "Transaction"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionMined",
    "description": "",
    "fields": [
      {
        "name": "blockHeader",
        "type": {
          "name": "BlockHeader"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": {
          "name": "TransactionTrace"
        },
        "description": "",
        "arguments": []
      },
      {
        "name": "confirmations",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionForked",
    "description": "",
    "fields": [
      {
        "name": "transaction",
        "type": {
          "name": "Transaction"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionConfirmed",
    "description": "",
    "fields": [
      {
        "name": "confirmations",
        "type": {
          "reqType": true,
          "name": "Uint64"
        },
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TrxTransitionReplaced",
    "description": "",
    "fields": [
      {
        "name": "replacedById",
        "type": {
          "name": "String"
        },
        "description": "",
        "arguments": []
      }
    ]
  }
]