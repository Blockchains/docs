[
  {
    "name": "Query",
    "description": "",
    "fields": [
      {
        "name": "searchTransactionsForward",
        "type": "SearchTransactionsForwardResponse!",
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\n\nWhen the returned `cursor` is empty, it means you have reached the end of the specified block\nrange.\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\nwas in fact REMOVED from the chain because of blocks reorganization.\n\nSee also the streaming version under `Subscription`",
        "arguments": [
          {
            "name": "query",
            "type": "String!",
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": "Int64",
            "description": "Lower block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": "Int64",
            "description": "Higher block num boundary, inclusively. A zero or negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "cursor",
            "type": "String",
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": "Int64",
            "description": "Limit the number of results per page of results (max 200)."
          },
          {
            "name": "irreversibleOnly",
            "type": "Boolean",
            "description": "When true, only stream back results once they pass the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          }
        ]
      },
      {
        "name": "searchTransactionsBackward",
        "type": "SearchTransactionsBackwardResponse!",
        "description": "Search the blockchain backward for transaction *execution traces* based on `query`.\n\nWhen the returned `cursor` is empty, it means you have reached the end of the specified block\nrange.\n\nSee also the streaming version under `Subscription`",
        "arguments": [
          {
            "name": "query",
            "type": "String!",
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": "Int64",
            "description": "Lower block num boundary, inclusively. A value of 0 means the beginning of the chain. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": "Int64",
            "description": "Higher block num boundary, inclusively. A zero or negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "cursor",
            "type": "String",
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": "Int64",
            "description": "Limit the number of results per page of results (max 200)."
          },
          {
            "name": "irreversibleOnly",
            "type": "Boolean",
            "description": "When true, only stream back results once they pass the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          }
        ]
      },
      {
        "name": "blockIDByTime",
        "type": "BlockIDResponse!",
        "description": "Return the block ID found around the given `time`, based on the `comparator` provided.",
        "arguments": [
          {
            "name": "time",
            "type": "Time!",
            "description": ""
          },
          {
            "name": "comparator",
            "type": "COMPARATOR",
            "description": ""
          }
        ]
      },
      {
        "name": "blockIDAtAccountCreation",
        "type": "BlockIDResponse!",
        "description": "Return the block Number where given `account` was created.",
        "arguments": [
          {
            "name": "account",
            "type": "String!",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "Subscription",
    "description": "",
    "fields": [
      {
        "name": "searchTransactionsForward",
        "type": "SearchTransactionForwardResponse!",
        "description": "Search the blockchain forward for transaction *execution traces* based on `query`.\n\nWARN: always consider the `undo` field in forward searches, which signal that the matching element\nwas in fact REMOVED from the chain because of blocks reorganization.",
        "arguments": [
          {
            "name": "query",
            "type": "String!",
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": "Int64",
            "description": "Lower block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": "Int64",
            "description": "Higher block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`). A `null` value means no higher limits, therefore searching into the future of the chain."
          },
          {
            "name": "cursor",
            "type": "String",
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": "Int64",
            "description": "Limit the number of results streamed back."
          },
          {
            "name": "irreversibleOnly",
            "type": "Boolean",
            "description": "When true, only stream back results once they pass the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          },
          {
            "name": "liveMarkerInterval",
            "type": "Uint32",
            "description": "If non-zero, indicates you want to mark the stream when reaching live blocks. A marker is a response with a `trace` equal to `null`, which will be sent at each `liveMarkerInterval` blocks. The first `trace` to be equal to `null` in a stream indicates you are now processing live blocks.\n\nThe value for `liveMarkerInterval` is a number of blocks."
          }
        ]
      },
      {
        "name": "searchTransactionsBackward",
        "type": "SearchTransactionBackwardResponse!",
        "description": "Search the blockchain backward for transaction execution traces based on `query`.\n\nNOTE: The `undo` field is not used in backwards search.",
        "arguments": [
          {
            "name": "query",
            "type": "String!",
            "description": "dfuse Search Query Language string"
          },
          {
            "name": "lowBlockNum",
            "type": "Int64",
            "description": "Lower block num boundary, inclusively. The absence of a value, or a value of 0 means the beginning of the chain. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`)."
          },
          {
            "name": "highBlockNum",
            "type": "Int64",
            "description": "Higher block num boundary, inclusively. A negative value means a block relative to the head or last irreversible block (depending on `irreversibleOnly`), -1 being the head block."
          },
          {
            "name": "cursor",
            "type": "String",
            "description": "Opaque data piece that you can pass back to continue your search if it ever disconnected. Retrieve it from the `cursor` field in the responses of this call. It is safe to use the same cursor in BOTH directions (forward and backward)."
          },
          {
            "name": "limit",
            "type": "Int64",
            "description": "Limit the number of results streamed back."
          },
          {
            "name": "irreversibleOnly",
            "type": "Boolean",
            "description": "When true, only stream back results that have passed the irreversibility boundary. Otherwise, allow fetching results up to the head block."
          }
        ]
      }
    ]
  },
  {
    "name": "DecodedObject",
    "description": "",
    "fields": [
      {
        "name": "object",
        "type": "JSON",
        "description": "",
        "arguments": []
      },
      {
        "name": "error",
        "type": "String",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionsForwardResponse",
    "description": "",
    "fields": [
      {
        "name": "cursor",
        "type": "String",
        "description": "This is a chain-wide cursor, indicating the progress of a search. You can pass it back to the different search methods to continue fetching more results, in *either directions* (even in the reverse direction). A `null` cursor means the end of range has been reached.",
        "arguments": []
      },
      {
        "name": "results",
        "type": "[SearchTransactionForwardResponse!]",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionsBackwardResponse",
    "description": "",
    "fields": [
      {
        "name": "cursor",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "results",
        "type": "[SearchTransactionBackwardResponse!]",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionForwardResponse",
    "description": "A single transaction trace response, matching a forward search query.\n\nWARNING: do NOT forget to include the `undo` field to determine if the message is actually a REVERSAL of the transaction.\n\nNOTE: always check the value of `trace.status` to make sure it is `executed` if you want to make sure a transaction made it to the chain.",
    "fields": [
      {
        "name": "undo",
        "type": "Boolean!",
        "description": "Whether this response is an UNDO operation of a previously sent response.\n\nIn a forward search, make sure you catch this and always verify its value.. as to not double or triple count transactions.",
        "arguments": []
      },
      {
        "name": "cursor",
        "type": "String!",
        "description": "Chain-wide cursor, allowing you to continue querying when connection is interrupted",
        "arguments": []
      },
      {
        "name": "isIrreversible",
        "type": "Boolean!",
        "description": "Whether the block represented here is irreversible",
        "arguments": []
      },
      {
        "name": "irreversibleBlockNum",
        "type": "Uint32!",
        "description": "The last known irreversible block when processing this transaction.  This number can be equal to the current block num (under `trace.block.num`), in which case, `isIrreversible` is true.  In the reversible segment of the chain, this number will be drifting away by the number of blocks separating head block and LIB.",
        "arguments": []
      },
      {
        "name": "block",
        "type": "BlockHeader!",
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": "TransactionTrace",
        "description": "Traces of execution of the transaction containing matching actions.\n\nCheck `matchingActions` below to limit the response to only actions matching your search query. Although, all actions from the transactions are available (see `executedActions`).",
        "arguments": []
      }
    ]
  },
  {
    "name": "SearchTransactionBackwardResponse",
    "description": "A single transaction trace response, matching a backward search query.\n\nNOTE: always check the value of `trace.status` to make sure it is `executed` if you want to make sure a transaction made it to the chain.",
    "fields": [
      {
        "name": "cursor",
        "type": "String!",
        "description": "Chain-wide cursor, allowing you to continue querying when connection is interrupted",
        "arguments": []
      },
      {
        "name": "isIrreversible",
        "type": "Boolean!",
        "description": "Whether the block represented here is irreversible",
        "arguments": []
      },
      {
        "name": "irreversibleBlockNum",
        "type": "Uint32!",
        "description": "The last known irreversible block when processing this transaction.  This number can be equal to the current block num (under `trace.block.num`), in which case, `isIrreversible` is true.  In the reversible segment of the chain, this number will be drifting away by the number of blocks separating head block and LIB.",
        "arguments": []
      },
      {
        "name": "block",
        "type": "BlockHeader!",
        "description": "",
        "arguments": []
      },
      {
        "name": "trace",
        "type": "TransactionTrace",
        "description": "Traces of execution of the transaction containing matching actions.\n\nCheck `matchingActions` below to limit the response to only actions matching your search query. Although, all actions from the transactions are available (see `executedActions`).",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionTrace",
    "description": "Traces of the execution of a given transaction. This means the\ntransaction was executed on the chain. You also get context about the\nblock in which it was executed, and the status of the execution.\n\nWARN: Make sure to always check the `status` (in the `receipt`) to\nmake sure you're not considering a failed transaction as if it was\nsuccessful.",
    "fields": [
      {
        "name": "id",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "block",
        "type": "BlockHeader!",
        "description": "Block in which this transaction trace occurred",
        "arguments": []
      },
      {
        "name": "status",
        "type": "TRANSACTION_STATUS!",
        "description": "This is a short-hand for `receipt.status`.",
        "arguments": []
      },
      {
        "name": "receipt",
        "type": "TransactionReceiptHeader!",
        "description": "",
        "arguments": []
      },
      {
        "name": "elapsed",
        "type": "Int64!",
        "description": "",
        "arguments": []
      },
      {
        "name": "netUsage",
        "type": "Uint64!",
        "description": "Amount of network bandwidth consumed (for the sake of the rate limiting engine) by this whole transaction, in bytes (short-hand for `receipt.net_usage_words * 8`.",
        "arguments": []
      },
      {
        "name": "scheduled",
        "type": "Boolean!",
        "description": "Whether this transaction was originally a scheduled transaction.",
        "arguments": []
      },
      {
        "name": "executedActions",
        "type": "[ActionTrace!]!",
        "description": "Lists all action traces, flattened and ordered by execution time.",
        "arguments": []
      },
      {
        "name": "matchingActions",
        "type": "[ActionTrace!]!",
        "description": "Returns a flattened list of action traces, in _execution_ order, of only the matching transactions (from a search, or other filtering).",
        "arguments": []
      },
      {
        "name": "topLevelActions",
        "type": "[ActionTrace]!",
        "description": "Traces of actions at depth=0, those part of the original Transaction. In `nodeos` version 1.7.0 and below, this corresponds to the `action_traces` field.",
        "arguments": []
      },
      {
        "name": "exceptJSON",
        "type": "JSON",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockHeader",
    "description": "BlockHeader is the header of a block, excluding the transactions in that block.",
    "fields": [
      {
        "name": "id",
        "type": "String!",
        "description": "ID of the block",
        "arguments": []
      },
      {
        "name": "num",
        "type": "Uint32!",
        "description": "Block number in the chain",
        "arguments": []
      },
      {
        "name": "timestamp",
        "type": "Time!",
        "description": "",
        "arguments": []
      },
      {
        "name": "producer",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "confirmed",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "previous",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "transactionMRoot",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "actionMRoot",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "scheduleVersion",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "newProducers",
        "type": "ProducerSchedule",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "ProducerSchedule",
    "description": "",
    "fields": [
      {
        "name": "version",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "producers",
        "type": "[ProducerKey!]!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "ProducerKey",
    "description": "",
    "fields": [
      {
        "name": "producerName",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "blockSigningKey",
        "type": "String!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "TransactionReceiptHeader",
    "description": "",
    "fields": [
      {
        "name": "status",
        "type": "TRANSACTION_STATUS!",
        "description": "",
        "arguments": []
      },
      {
        "name": "cpuUsageMicroSeconds",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "netUsageWords",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "ActionTrace",
    "description": "ActionTrace holds the traces of execution of a single action within a transaction.",
    "fields": [
      {
        "name": "seq",
        "type": "Uint64!",
        "description": "Global sequence ID for this action in this chain (shorthand for receipt.global_sequence). NOTE: if this is a failed action, seq will be 0.",
        "arguments": []
      },
      {
        "name": "executionIndex",
        "type": "Uint32!",
        "description": "Zero-based index of this action within the transaction, in _execution_ order.",
        "arguments": []
      },
      {
        "name": "receipt",
        "type": "ActionReceipt",
        "description": "Action receipt (which differs from the Transaction receipt).\n\nThe receipt will be null when failures occur. Verify the `status`\nfield on the TransactionTrace object.",
        "arguments": []
      },
      {
        "name": "receiver",
        "type": "String!",
        "description": "Account which code was executed to produce this execution trace.\n\nShorthand for receipt.receiver",
        "arguments": []
      },
      {
        "name": "account",
        "type": "String!",
        "description": "Target method's account name.  This does *not* correspond to the contract code being executed, that is what `receiver` means.  This value namespaces your actions.\n\nShorthand for act.account in `nodeos` traces",
        "arguments": []
      },
      {
        "name": "name",
        "type": "String!",
        "description": "Target method's action name. This value, combined with the `account`, determines which code path will be executed in the `receiver` contract code.\n\nShorthand for act.name in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "authorization",
        "type": "[PermissionLevel!]!",
        "description": "Signatories required to execute this action.\n\nShorthand for `act.authorization` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "data",
        "type": "JSON",
        "description": "Data payload. Might be a string or a JSON object, depending on whether it was possible to unpack it using an ABI.\n\nShorthand for `act.data` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "json",
        "type": "JSON",
        "description": "JSON Object representing the action parameters, decoded through the ABI. Will be `null` if it wasn't possible to decode it.\n\nShorthand for action.json",
        "arguments": []
      },
      {
        "name": "hexData",
        "type": "String!",
        "description": "Hex-encoded string representing the raw data for the action.\n\nShorthand for `act.hex_data` in `nodeos` traces.",
        "arguments": []
      },
      {
        "name": "ramOps",
        "type": "[RAMOp!]!",
        "description": "A list of RAM mutation operations, produced by this transaction.\n\nNOTE: the RAM ops on an action never include operations that are mutations of the transaction itself (like creation of a deferred, or removal of a deferred from RAM). For this, check `ramOps` on the TransactionTrace object.",
        "arguments": []
      },
      {
        "name": "dtrxOps",
        "type": "[DTrxOp!]!",
        "description": "A list of all operations affecting deferred transactions, like creation, deletion, modification, produced by this action.",
        "arguments": []
      },
      {
        "name": "tableOps",
        "type": "[TableOp!]!",
        "description": "A list of table mutation operations (creation or deletion of a _table_, not a _row_).",
        "arguments": []
      },
      {
        "name": "dbOps",
        "type": "[DBOp!]!",
        "description": "A list of database operations produced by this action. Insertions, modifications and deletions of any table _rows_ in the scope of this action's `receiver`.",
        "arguments": [
          {
            "name": "code",
            "type": "String",
            "description": ""
          },
          {
            "name": "table",
            "type": "String",
            "description": ""
          }
        ]
      },
      {
        "name": "console",
        "type": "String!",
        "description": "Output of the action's `print()` statements from within the smart contract.",
        "arguments": []
      },
      {
        "name": "contextFree",
        "type": "Boolean!",
        "description": "Whether this action is a context-free action.",
        "arguments": []
      },
      {
        "name": "elapsed",
        "type": "Int64!",
        "description": "Elapsed time between the beginning of the execution of this action, relative to the time the whole transaction started to be processed",
        "arguments": []
      },
      {
        "name": "exceptJSON",
        "type": "JSON",
        "description": "If non-null, this action failed. The stack and reasons will be found within the raw JSON payload provided.",
        "arguments": []
      },
      {
        "name": "isNotify",
        "type": "Boolean!",
        "description": "Whether this action is a notification, meaning that it was triggered as a side effect rom another contract, and copied the exact same payload from the original transaction.  This happens when you call the `require_notify` method from the EOSIO intrinsics (from within a smart-contract).",
        "arguments": []
      },
      {
        "name": "isMatchingQuery",
        "type": "Boolean!",
        "description": "Whether or not this action matched the dfuse search query",
        "arguments": []
      },
      {
        "name": "createdActions",
        "type": "[ActionTrace]!",
        "description": "Traces of actions _created_ by this action. WARN: this doesn't infer that the operations were written to the blockchain in this order, only that it was created by this action. To obtain execution order, see `executedActions` on the TransactionTrace object.",
        "arguments": [
          {
            "name": "sort",
            "type": "ACTION_SORT_ORDER",
            "description": ""
          }
        ]
      },
      {
        "name": "creatorAction",
        "type": "ActionTrace",
        "description": "Trace of the action that created this one, the one which _created_ this action. WARN: it is not necessarily the parent in execution order, but will reflect which smart contract did the creation of either the notification, action or context_free_action.",
        "arguments": []
      },
      {
        "name": "closestUnnotifiedAncestorAction",
        "type": "ActionTrace",
        "description": "Use this to rebuild the execution tree, using the `nodeos` dispatch algorithm of notifications, actions and context-free actions.\n\nThis is similar to what you would have gotten in `nodeos` prior to version 1.8.0.",
        "arguments": []
      }
    ]
  },
  {
    "name": "RAMOp",
    "description": "Represents a change in consumption of RAM for a given account",
    "fields": [
      {
        "name": "operation",
        "type": "RAM_OPERATION!",
        "description": "What happened to justify this change in RAM.",
        "arguments": []
      },
      {
        "name": "payer",
        "type": "String!",
        "description": "The account being debited or credited RAM",
        "arguments": []
      },
      {
        "name": "delta",
        "type": "Int64!",
        "description": "Number of bytes that were either consumed (positive) or released (negative)",
        "arguments": []
      },
      {
        "name": "usage",
        "type": "Uint64!",
        "description": "Number of bytes now used by the `payer` account, after applying this RAM operation.\n\nTo have a precise view of the RAM left on an account after this transaction was applied, go through all actions in execution order (`TransactionTrace.executedActions`) and use the last RAMOp for the given account.",
        "arguments": []
      }
    ]
  },
  {
    "name": "DTrxOp",
    "description": "A change in deferred transactions in the chain's memory.",
    "fields": [
      {
        "name": "operation",
        "type": "DTRX_OPERATION!",
        "description": "The source or cause of creation/modification/deletion of a deferred transaction",
        "arguments": []
      },
      {
        "name": "sender",
        "type": "String",
        "description": "",
        "arguments": []
      },
      {
        "name": "senderID",
        "type": "String",
        "description": "",
        "arguments": []
      },
      {
        "name": "payer",
        "type": "String",
        "description": "The account being debited or credited to store this deferred transaction",
        "arguments": []
      },
      {
        "name": "publishedAt",
        "type": "Time",
        "description": "The time this deferred was published at",
        "arguments": []
      },
      {
        "name": "delayUntil",
        "type": "Time",
        "description": "The time at which Block Producers will start attempting to execute this transaction",
        "arguments": []
      },
      {
        "name": "expirationAt",
        "type": "Time",
        "description": "The time at which Block Producers will evict this transaction from memory if it fails execution.",
        "arguments": []
      },
      {
        "name": "trxID",
        "type": "String",
        "description": "The transaction ID of the `transaction`",
        "arguments": []
      },
      {
        "name": "transaction",
        "type": "Transaction",
        "description": "The deferred transaction payload itself.",
        "arguments": []
      }
    ]
  },
  {
    "name": "TableOp",
    "description": "Creation or deletion of a table",
    "fields": [
      {
        "name": "operation",
        "type": "TABLE_OPERATION!",
        "description": "",
        "arguments": []
      },
      {
        "name": "table",
        "type": "TableOpKey!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "DBOp",
    "description": "Represents the mutation of a row, in a contract table.",
    "fields": [
      {
        "name": "operation",
        "type": "DB_OPERATION!",
        "description": "",
        "arguments": []
      },
      {
        "name": "oldPayer",
        "type": "String",
        "description": "Previous paying account.  This is null in the case of an insertion.",
        "arguments": []
      },
      {
        "name": "newPayer",
        "type": "String",
        "description": "New paying account.  This is null in the case of a deletion.",
        "arguments": []
      },
      {
        "name": "key",
        "type": "DBOpKey!",
        "description": "Primary key of the row in the table.",
        "arguments": []
      },
      {
        "name": "oldData",
        "type": "String",
        "description": "Contents (hex data) of the row before a REM or UPD operation.",
        "arguments": []
      },
      {
        "name": "newData",
        "type": "String",
        "description": "Contents (hex data) of the row after an INS or UPD operation.",
        "arguments": []
      },
      {
        "name": "oldJSON",
        "type": "DecodedObject!",
        "description": "Decoded version of oldData",
        "arguments": []
      },
      {
        "name": "newJSON",
        "type": "DecodedObject!",
        "description": "Decoded version of newData",
        "arguments": []
      }
    ]
  },
  {
    "name": "DBOpKey",
    "description": "",
    "fields": [
      {
        "name": "code",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "table",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "scope",
        "type": "String!",
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": "UINT64_ENCODING",
            "description": ""
          }
        ]
      },
      {
        "name": "key",
        "type": "String!",
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": "UINT64_ENCODING",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "TableOpKey",
    "description": "",
    "fields": [
      {
        "name": "code",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "table",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "scope",
        "type": "String!",
        "description": "",
        "arguments": [
          {
            "name": "encoding",
            "type": "UINT64_ENCODING",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "ActionReceipt",
    "description": "Execution receipt for a given ActionTrace.\n\nThe `nodeos` field `auth_sequence` is not yet present. Contact us if you need it.",
    "fields": [
      {
        "name": "receiver",
        "type": "String!",
        "description": "Account for which code is being triggered. Beware that this might not be the same value as `account`, or the target account of the action, in the case of notifications. See documentation for `require_notify` in EOSIO contracts",
        "arguments": []
      },
      {
        "name": "digest",
        "type": "String!",
        "description": "Hash of the action payload. Also known as `act_digest` from `nodeos`",
        "arguments": []
      },
      {
        "name": "globalSequence",
        "type": "Uint64!",
        "description": "Globally unique sequence number in all actions from the longest chain. This will never be reused, and is guaranteed to monotonically increment with each action.\n\nThis property can be relied on to keep track of forks in your database, at the action level.\n\nWARNING: when micro-forks happens, global sequences from the different forks will be reused, but will be associated with other actions. This is why it's important to navigate forks properly.",
        "arguments": []
      },
      {
        "name": "codeSequence",
        "type": "Uint64!",
        "description": "",
        "arguments": []
      },
      {
        "name": "abiSequence",
        "type": "Uint64!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Transaction",
    "description": "",
    "fields": [
      {
        "name": "expiration",
        "type": "Time!",
        "description": "",
        "arguments": []
      },
      {
        "name": "refBlockNum",
        "type": "Uint32!",
        "description": "TaPoS reference block num.\n\nThis value holds only 16 bits of the blockNum (instead of 32).\nThe other 16 bits are in the current blockNum (unless overflown).",
        "arguments": []
      },
      {
        "name": "refBlockPrefix",
        "type": "Uint32!",
        "description": "TaPoS block prefix (bytes 8-16 of the block ID), in order to identify the correct fork for a given block number.",
        "arguments": []
      },
      {
        "name": "maxNetUsageWords",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "maxCPUUsageMS",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "delaySec",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "contextFreeActions",
        "type": "[Action!]!",
        "description": "",
        "arguments": []
      },
      {
        "name": "actions",
        "type": "[Action!]!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "Action",
    "description": "",
    "fields": [
      {
        "name": "account",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "name",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "authorization",
        "type": "[PermissionLevel]!",
        "description": "",
        "arguments": []
      },
      {
        "name": "json",
        "type": "JSON",
        "description": "",
        "arguments": []
      },
      {
        "name": "data",
        "type": "JSON",
        "description": "",
        "arguments": []
      },
      {
        "name": "hexData",
        "type": "String!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "PermissionLevel",
    "description": "",
    "fields": [
      {
        "name": "actor",
        "type": "String!",
        "description": "",
        "arguments": []
      },
      {
        "name": "permission",
        "type": "String!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "AuthSequence",
    "description": "",
    "fields": [
      {
        "name": "account",
        "type": "String",
        "description": "",
        "arguments": []
      },
      {
        "name": "sequence",
        "type": "Uint64!",
        "description": "",
        "arguments": []
      }
    ]
  },
  {
    "name": "BlockIDResponse",
    "description": "",
    "fields": [
      {
        "name": "time",
        "type": "Time!",
        "description": "\"true\" if a block id was found",
        "arguments": []
      },
      {
        "name": "num",
        "type": "Uint32!",
        "description": "",
        "arguments": []
      },
      {
        "name": "id",
        "type": "String!",
        "description": "",
        "arguments": []
      }
    ]
  }
]